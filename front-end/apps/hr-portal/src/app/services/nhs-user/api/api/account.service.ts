/**
 * BFF.HrPortal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param scheme 
     * @param redirectUri 
     * @param scope 
     * @param loginHint 
     * @param domainHint 
     * @param claims 
     * @param policy 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public microsoftIdentityAccountChallengeSchemeGet(scheme: string, redirectUri?: string, scope?: string, loginHint?: string, domainHint?: string, claims?: string, policy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public microsoftIdentityAccountChallengeSchemeGet(scheme: string, redirectUri?: string, scope?: string, loginHint?: string, domainHint?: string, claims?: string, policy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public microsoftIdentityAccountChallengeSchemeGet(scheme: string, redirectUri?: string, scope?: string, loginHint?: string, domainHint?: string, claims?: string, policy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public microsoftIdentityAccountChallengeSchemeGet(scheme: string, redirectUri?: string, scope?: string, loginHint?: string, domainHint?: string, claims?: string, policy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling microsoftIdentityAccountChallengeSchemeGet.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (redirectUri !== undefined && redirectUri !== null) {
            queryParameters = queryParameters.set('redirectUri', <any>redirectUri);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (loginHint !== undefined && loginHint !== null) {
            queryParameters = queryParameters.set('loginHint', <any>loginHint);
        }
        if (domainHint !== undefined && domainHint !== null) {
            queryParameters = queryParameters.set('domainHint', <any>domainHint);
        }
        if (claims !== undefined && claims !== null) {
            queryParameters = queryParameters.set('claims', <any>claims);
        }
        if (policy !== undefined && policy !== null) {
            queryParameters = queryParameters.set('policy', <any>policy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MicrosoftIdentity/Account/Challenge/${encodeURIComponent(String(scheme))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param scheme 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public microsoftIdentityAccountEditProfileSchemeGet(scheme: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public microsoftIdentityAccountEditProfileSchemeGet(scheme: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public microsoftIdentityAccountEditProfileSchemeGet(scheme: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public microsoftIdentityAccountEditProfileSchemeGet(scheme: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling microsoftIdentityAccountEditProfileSchemeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MicrosoftIdentity/Account/EditProfile/${encodeURIComponent(String(scheme))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param scheme 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public microsoftIdentityAccountResetPasswordSchemeGet(scheme: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public microsoftIdentityAccountResetPasswordSchemeGet(scheme: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public microsoftIdentityAccountResetPasswordSchemeGet(scheme: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public microsoftIdentityAccountResetPasswordSchemeGet(scheme: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling microsoftIdentityAccountResetPasswordSchemeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MicrosoftIdentity/Account/ResetPassword/${encodeURIComponent(String(scheme))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param scheme 
     * @param redirectUri 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public microsoftIdentityAccountSignInSchemeGet(scheme: string, redirectUri?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public microsoftIdentityAccountSignInSchemeGet(scheme: string, redirectUri?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public microsoftIdentityAccountSignInSchemeGet(scheme: string, redirectUri?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public microsoftIdentityAccountSignInSchemeGet(scheme: string, redirectUri?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling microsoftIdentityAccountSignInSchemeGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (redirectUri !== undefined && redirectUri !== null) {
            queryParameters = queryParameters.set('redirectUri', <any>redirectUri);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MicrosoftIdentity/Account/SignIn/${encodeURIComponent(String(scheme))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param scheme 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public microsoftIdentityAccountSignOutSchemeGet(scheme: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public microsoftIdentityAccountSignOutSchemeGet(scheme: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public microsoftIdentityAccountSignOutSchemeGet(scheme: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public microsoftIdentityAccountSignOutSchemeGet(scheme: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling microsoftIdentityAccountSignOutSchemeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MicrosoftIdentity/Account/SignOut/${encodeURIComponent(String(scheme))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
